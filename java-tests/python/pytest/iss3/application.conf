akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "ERROR"
}

agent {
  root = ./
  enablePortoOwnerContainer = false

  persist {
    write_attempts_delay = 1s
    use_new_persist_schema = false
    time_wait_providers = 0
  }

  state {
    stateRollover = "legacy"
    migrator = "_"
    statePreallocatedSizeMb = 100
    stateStoragePath = "./"
  }

  spaceToLeaveOnDisk = 3g

  sync {
    autoUpdatePeriod = 10s
    autoSyncPeriod = 10s
    aliveMarkerAllowedAge = 600s
    minResyncPeriod = 500ms
  }

  hostConfiguration {
    providersNumber = 1

    primaryProvider {
      type = "thrift"
      host = "iss-cacher-test.i-folb.fog.yandex.net"
      port = 9091
    }

    secondaryProvider {
      type = "dummy"
    }
  }

  shardtracker {
    host = "shardtracker.search.yandex.net"
    port = 9100
    cacheLifeTime = 30s
  }

  fetcher {

  	resource_driver_settings {
      		default_cooldown = 1s
      		recheck_period = 1s
      		release_download_slot_after_reservation_retries_failed = 10
    }
  }

  webapp {
    port = 25536
  }

  synchronizer {
    persist {
      path = ${agent.root}/state
    }
  }

  reopenlogs {
    akkaTimeout = 10m
    retries = 5
    hosts_mounts_whitelist = ["/usr/local/www/logs", "/db/bsconfig/webstate"]
  }

  feedback {
    resendPeriod = 600s
    maxSizePerInstance = 12kB

    onlyFullStateFeedback = false
    logGrabSize = 1kB
    logGrabCoolDownPeriod = 1m
    feedHistoryQueueSize = 10
    feedbackDrainTimeout = 300ms

    timingThresholdWarning = 1m
    writeHistory = false
  }

  jmx {
    mp {
      port = 25537
    }

    jolokia {
      policyLocation = "classpath:/jolokia.policy"
    }
  }

  container = "porto"

  porto {
    metaProcessContainer = "ISS-AGENT"
    socketPath = "/run/portod.socket"
    socketTimeOut = 20000
    workers = 2
    waitTimeout = 1s
    porto_operation_time_warn_threshold_seconds = 40

    defaultUlimit = "nproc: 20480 30720"

    propertyListProvider {
      type = restrict

      restrictedList {
        data = ["max_rss", "time", "cpu_usage"]
        properties = []
      }
    }

    blocking_async_pool {
      capacity = 1
      worker_wait_for_socket_timeout = 5m
      retries_on_pool_repopulation = 10
      repopulate_timeout_ms = 2m
    }
  }
}

servlet-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 0
    core-pool-size-factor = 1.0
    core-pool-size-max = 2
  }
}

local {
  configurations {
    cache {
      expire_after = 2m
      max_entries = 1000
    }
    loading_timeout = 10s
  }

  filter {
    threads = 1
  }

  configuration_filter {
    cache {
      expire_after = 1m
      max_entries = 100
    }
  }

  instance_filter {
    cache {
      expire_after = 1m
      max_entries = 1000
    }
  }

  loader {
    threads = 1
  }

  template_service {
    cache {
      expire_after = 1m
      max_entries = 10
    }
  }

  validator {
    threads = 8
    max_errors_for_rule = 100
  }

  applier {
    threads = 1
  }

  creator {
    threads = 1
  }

  facade_executor {
    threads = 10
  }
}
